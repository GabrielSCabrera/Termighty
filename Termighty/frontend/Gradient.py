import numpy as np

from ..data import int_types, str_types, arr_types, path_types, real_types
from ..backend import Grid_Fast, Pixel_Fast, Color_Fast
from .Color_Map import Color_Map
from ..utils import checkers

class Gradient(Grid_Fast):

    def __init__(self, shape, xrange, yrange, color_map, t = 0):
        '''
            PURPOSE
            A subclass of 'Grid_Fast' whose colors (color_b) are generated by
            any user-defined function of x, y, and t.

            WARNING
            Should not be instantiated directly; a subclass should inherit
            'Gradient' and implement a mathematical function that implements the
            '__call__' magic method for two positional parameters 'x' and 'y'
            and a time parameter 't'.

            PARAMETERS
            shape       <tuple> containing two elements of <class 'int'>
            xrange      <tuple> containing two elements of <class 'int'>
            yrange      <tuple> containing two elements of <class 'int'>
            color_map   instance of 'Color_Map'

            OPTIONAL PARAMETERS
            t           <float> greater than or equal to zero

        '''
        checkers.check_type_arr(shape, int_types, 'shape', '__init__')
        checkers.check_shape_arr(shape, (2,), 'shape', '__init__')
        checkers.check_range_arr(shape, 1, None, 'shape', '__init__')
        checkers.check_type(color_map, Color_Map)

        checkers.check_type_arr(xrange, real_types, 'xrange', '__init__')
        checkers.check_shape_arr(xrange, (2,), 'xrange', '__init__')
        checkers.check_shape_arr(xrange, (2,), 'xrange', '__init__')

        if xrange[0] > xrange[1]:
            msg = ('The first element in \'xrange\' must be smaller than its '
                   'second element.')
            raise ValueError(msg)

        checkers.check_type_arr(yrange, real_types, 'yrange', '__init__')
        checkers.check_shape_arr(yrange, (2,), 'yrange', '__init__')
        checkers.check_shape_arr(yrange, (2,), 'yrange', '__init__')

        if yrange[0] > yrange[1]:
            msg = ('The first element in \'yrange\' must be smaller than its '
                   'second element.')
            raise ValueError(msg)

        checkers.check_type(t, real_types, 't', 'set_t')
        checkers.check_range(t, 0, None, 't', 'set_t')

        self.t = t
        self.shape_arr = shape
        self.color_map = color_map
        self.xrange = np.linspace(xrange[0], xrange[1], self.shape[1])
        self.yrange = np.linspace(yrange[0], yrange[1], self.shape[0])

        data = [[Pixel_Fast() for i in self.xrange] for j in self.yrange]
        super().__init__(data)

    def set_xrange(self, xrange):
        '''
            PURPOSE
            To set the values of the instance's x-axis

            PARAMETERS
            xrange      <tuple> containing two elements of <class 'int'>
        '''
        checkers.check_type_arr(xrange, real_types, 'xrange', 'set_xrange')
        checkers.check_shape_arr(xrange, (2,), 'xrange', 'set_xrange')
        checkers.check_shape_arr(xrange, (2,), 'xrange', 'set_xrange')
        if xrange[0] >= xrange[1]:
            msg = ('The first element in \'xrange\' must be smaller than its '
                   'second element.')
            raise ValueError(msg)
        self.xrange = np.linspace(xrange[0], xrange[1], self.shape[1])
        self.update()

    def set_yrange(self, yrange):
        '''
            PURPOSE
            To set the values of the instance's y-axis

            PARAMETERS
            xrange      <tuple> containing two elements of <class 'int'>
        '''
        checkers.check_type_arr(yrange, real_types, 'yrange', 'set_yrange')
        checkers.check_shape_arr(yrange, (2,), 'yrange', 'set_yrange')
        checkers.check_shape_arr(yrange, (2,), 'yrange', 'set_yrange')
        if yrange[0] > yrange[1]:
            msg = ('The first element in \'yrange\' must be smaller than its '
                   'second element.')
            raise ValueError(msg)
        self.yrange = np.linspace(yrange[0], yrange[1], self.shape[0])
        self.update()

    def set_range(self, xrange, yrange):
        '''
            PURPOSE
            To set the values of the instance's x- and y-axes

            PARAMETERS
            xrange      <tuple> containing two elements of <class 'int'>
            yrange      <tuple> containing two elements of <class 'int'>
        '''

        checkers.check_type_arr(xrange, real_types, 'xrange', 'set_range')
        checkers.check_shape_arr(xrange, (2,), 'xrange', 'set_range')
        checkers.check_shape_arr(xrange, (2,), 'xrange', 'set_range')

        if xrange[0] > xrange[1]:
            msg = ('The first element in \'xrange\' must be smaller than its '
                   'second element.')
            raise ValueError(msg)

        checkers.check_type_arr(yrange, real_types, 'yrange', 'set_range')
        checkers.check_shape_arr(yrange, (2,), 'yrange', 'set_range')
        checkers.check_shape_arr(yrange, (2,), 'yrange', 'set_range')

        if yrange[0] > yrange[1]:
            msg = ('The first element in \'yrange\' must be smaller than its '
                   'second element.')
            raise ValueError(msg)

        self.xrange = np.linspace(xrange[0], xrange[1], self.shape[1])
        self.yrange = np.linspace(yrange[0], yrange[1], self.shape[0])
        self.update()

    def set_t(self, t):
        '''
            PURPOSE
            To set the values of the instance's time 't'

            PARAMETERS
            t           <float> greater than or equal to zero
        '''
        checkers.check_type(t, real_types, 't', 'set_t')
        checkers.check_range(t, 0, None, 't', 'set_t')
        self.t = t
        self.update()

    def __call__(self, x, y, t):
        '''
            PURPOSE
            Not implemented for 'Gradient', which is an abstract superclass.
            Should be implemented in subclasses of 'Gradient' with the same
            parameters as above.

            PARAMETERS
            x           numerical value (implemented by user)
            y           numerical value (implemented by user)
            t           numerical value (implemented by user)

            RETURNS
            z           real-valued number (implemented by user)
        '''
        msg = ('\nClass \'Gradient\' is an abstract class that must be '
               'inherited.  Create a subclass with a \'__call__\' method and '
               'use that instead.')
        raise NotImplementedError(msg)

    def update(self):
        '''
            PURPOSE
            Updates instance attributes based on the state of other instance
            attributes.
        '''
        X,Y = np.meshgrid(self.xrange, self.yrange)
        Z = np.array(self.__call__(X, Y, self.t)).astype(np.float64)
        Z = (Z - np.min(Z))/(np.max(Z) - np.min(Z))
        rgb = self.color_map(Z)
        for m in range(self.shape_arr[0]):
            for n in range(self.shape_arr[1]):
                self.data[m,n].color_b_obj.set_RGB(rgb[m,n])
                self.data[m,n].update()
        super().update()
